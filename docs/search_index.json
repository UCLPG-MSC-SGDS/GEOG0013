[["index.html", "GEOG0013: Geography in the Field 1 (GIF1) 2022/23 Welcome to Introduction to Statistics Structure Self-guided tutorials Questions &amp; Discusson Forum on Moodle Meet team", " GEOG0013: Geography in the Field 1 (GIF1) 2022/23 Welcome to Introduction to Statistics Welcome to GIF1’s Introduction to Statistics. So far you have been introduction to the core tenets and principles of geography taught through the different themes touching on physical sciences (e.g., coastal and rivers) and social sciences (e.g., ethnographic methods and urbanism). This session focuses on the themes of statistics (i.e., data analysis). Here, we will provide you with an introduction to the basic statistical methods for exploring &amp; representing secondary data from Barcelona, using a programming software tool known as R/RStudio. Video [Information]: Getting started with the learning process (Length: 14:50 minutes) If the video does not play within this section, then try playing it from Microsoft Streams - you should be able to view it there using this LINK Important Notes: Access to Microsoft Steams may require use of your UCL institutional login details Structure The structure of this GIF1 component is a 3-hour group computer practical workshop that will be delivered in-person. All students have been allocated to one of 8 groups (i.e., group A, B, C, D, E, F, G, H or I). The workshop for week 4’s Introduction to Statistics will take place on the following dates: Wednesday 26th October, 09:00am-12:00pm for groups F, G, H, I Friday 28th October, 02:00pm-05:00pm for groups A, B, C, D, E Group room allocations: Here are the details for the room location. Please use the table below view the map details of the location, as well as watch the videos embedded them to see how to get to the location. To avoid confusion, please go to your group’s designated cluster room. Group Date Location A Friday, 28/10 Chadwick Building, Room 2.23, Map; Video B Friday, 28/10 Bedford Way (26), Room G11, Map; Video C Friday, 28/10 ICH Wolfson Centre Room I (1st floor), Map; Video D Friday, 28/10 Birkbeck Gordon Sq (43); Room B06, Map; Video E Friday, 28/10 IOE Bedford Way (20), Room 784, Map; Video F Wednesday, 26/10 Birkbeck Gordon Sq (43), Room B06, Map; Video G Wednesday, 26/10 North-West Wing, Room G17, Map; Video H Wednesday, 26/10 Birkbeck Gordon Sq (43), Room 122, Map; Video I Wednesday, 26/10 IOE Bedford Way (20), Room 784, Map; Video IMPORTANT NOTE: All students on the Wednesday workshops, please bring your own laptops with you to the computer practicals. If you do not own a laptop, or not in possession of one, you can use UCL Laptop Loan services [CLICK HERE]. Self-guided tutorials Prior to the workshops which will be supported by the teaching assistants (PGTAs), you will have the opportunity to go through the self-guided tutorials presented on this website on your own. The teaching materials have been designed to be accessible to anyone who has never used RStudio. It is also accessible to anyone who has never done statistics before. Here, we are introducing you to the absolute basics of R-programming and statistics. The tutorials will be very prescriptive with instructions, and these instructions will be support by guided videos. The whole point of this self-guided tutorials is to prepare you for the group workshop which will be facilitated by the PGTAs, which they, in turn, will further help prepare you for the Data Analysis Worksheet which is worth 10% of the assessment. Details on this will come shortly. Questions &amp; Discusson Forum on Moodle During this time - use Moodle on a regular basis to interact with the Forum: Questions and Discussion platform. Use this platform to post general questions about the content on this webpage, or for posting problems on technical issues you have encountered during your self-guided study. The PGTAs will respond accordingly with solutions. Students are welcome to engage and support each other in-person and/or through this forum during this self-study time. Meet team You will get opportunity to meet the PGTAs in-person at your workshop. Here are PGTAs who will support you through this time: PGTA Details Jason Lynch PhD Student (Department of Geography) Lan Li PhD Student (Institute of Risk &amp; Disaster Reduction) Md Izazul Haq PhD Student (Department of Geography) Shun-Chan Tsai PhD Student (Department of Geography) Shunya Kimura PhD Student (Department of Geography) Feel free to contact me via email for help, you can also book appointments for additional support if need be. My office is based at UCL Department of Geography, North West Wing building [Map]. My contact information are: Anwar Musah | Lecturer in Social &amp; Geographic Data Science UCL Department of Geography University College London Room 115 North-West Wing, Gower Street, London, WC1E 6BT Email: a.musah@ucl.ac.uk "],["introduction.html", "Introduction Learning outcomes", " Introduction The goal of week four’s session is three-way - the first part is to get you started with using RStudio and being familiar with its environment. The second part of the session aims to introduce you to the basic programming etiquette for basic data management. The third part is focused on building your confidence for using RStudio for data analysis. At the end of this workshop, you should be able to perform some basic data managing tasks as well as conduct descriptive analysis in RStudio. The skills learned here will enable you complete your Data Analysis Worksheet. Learning outcomes Across the three parts, the learning outcomes for this workshop are partitioned are as follows: The first task includes getting you started with RStudio by installing the needed software(s) (i.e., RStudio and R (Base)) on to your personal laptop. The second task aims to get you to being familiar with its RStudio’s environment and panels. Here, we begin with you interacting with RStudio’s console to do simple arithmatic and creating objects. The third task we will begin a soft introduction on the basics of managing data in RStudio. This includes learning how to create various objects in RStudio such as vector and data frame objects which forms the basics of data structures. The crucial part of this session will be to teach how to set-up working directories, scripting and importing Barcelona datasets in RStudio. Finally, we will learn how to handle the imported data for descriptive analysis using the following techniques: (a.) data types and visualisation; (b.) frequency distribution; and (c.) central tendency measures. These task will be supported with guidance videos to help with the self-guided learning. Let us begin! "],["part-1-getting-started-with-rstudio.html", "Part 1: Getting started with RStudio What is RStudio (or R) Download and install RStudio on to your laptop Becoming familiar with the panels in RStudio Using R Console as a Calculator Creating basic objects and assigning values to it", " Part 1: Getting started with RStudio What is RStudio (or R) R, or RStudio is a statistical software programming package that allows the user to carry out different types of statistical analysis. It can also be used as a GIS software to perform various kinds of analysis on geographical data. In the same vein, you can use it for data managing and geo-processing (i.e., importing different types of data that non-spatial, or spatial formats for manipulation beforehand for analysis). There are two versions: The famous icon on the left is the version for R (Base), and the one on the right is the version for RStudio. Both software packages are the same. The only difference is that RStudio is attractive, intuitive, and more importantly, it is user-friendly than Base R. So, we will be using this version (i.e., RStudio) throughout this workshop. Let us talk about downloading RStudio. Video [Tutorial]: Getting started with RStudio (Length: 23:53 minutes) If the video does not play within this section, then try playing it from Microsoft Streams - you should be able to view it there using this LINK Download and install RStudio on to your laptop RStudio is an open source software, and today its the go-to software for many researchers - its highly recommended for anyone in the domains of data science, scientific research, and technical communication. It is easy to access, and easy to download and install. In order for RStudio to work you must first install R (Base). You can follow the steps and use the table below to download the correct version for your operating system (i.e., Windows or MAC). STEPS Download the file (i.e., .exe or .pkg) for R (Base) in accordance with your operating system from the links provided in the table below. Next, install it by clicking on the downloaded file (i.e., .exe or .pkg). Now, we can download the file (i.e., .exe or .dmg) for RStudio in accordance with your operating system from the links provided in the table below. You can install it by clicking on the downloaded file (i.e., .exe or .dmg). OS User type R (Base) RStudio Desktop Windows R-4.2.1-win.exe RStudio-2022.07.1-554.exe MAC R-4.2.1.pkg RStudio-2022.07.1-554.dmg Becoming familiar with the panels in RStudio Now that you have installed RStudio onto our computer. You should by now have opened RStudio on your laptop. When opening RStudio for the first time, you are greeted with its interface. The window is split into three panels: 1.) R Console, 2.) Environments and 3.) Files, help &amp; Output. Panel 1: The Console lets the user type in R-codes to perform quick commands and basic calculations. Panel 2: The Environments lets the user see which datasets, spatial objects and other files are currently stored in RStudio’s memory Panel 3: Under the File tab, it lets the user access other folders stored in the computer to open datasets. Under the Help tab, it also allows the user to view the help menu for codes and commands. Finally, under the Plots tab, the user can perusal his/her generated plots (e.g., histogram, scatterplot, maps etc.). The above section is the Menu Bar. You can access other functions for saving, editing, and opening a new Script File for writing codes. Opening a new Script File will reveal a fourth panel above the Console. You can open a Script File by: Clicking on the File tab listed inside the Menu Bar. A scroll down bar will reveal itself. Here, you can scroll to the section that says New File. Under New File, click on R Script. This should open a new Script File titled “Untitled 1”. Important Notes: Throughout the course, and in all practical tutorials, you will be encouraged to use an R Script for collating and saving the codes you have written for carrying out spatial analysis. However, we will start writing codes in a script in part 2 of the tutorials. For now, let us start with the absolute basics, which is interacting with the R Console and using it as a basic calculator for typing simple code. Using R Console as a Calculator The R console window (i.e., Panel 1) is the place where RStudio is waiting for you to tell it what to do. It will show the code you have commanded RStudio to execute, and it will also show the results from that command. You can type the commands directly into the window for execution as well. Let us start by using the console window as a basic calculator for typing in addition (+), subtraction (-), multiplication (*), division (/), exponents (^) and performing other complex sums. Click inside the R Console window and type 19+8, and press enter key button ↵ to get your answer. Quickly perform the following maths by typing them inside the R Console window: # Perform addition 19+8 # Perform subtraction 20-89 # Perform multiplication 18*20 # Perform division 27/3 # To number to a power e.g., 2 raise to the power of 8 2^8 # Perform complex sums (5*(170-3.405)/91)+1002 Important Notes: The text that follows after the hash tag # in the above code chunk is a comment and actual code. It is there telling you what the code without hash tag # in front of it is doing. Aside from basic arithmetic operations, we can use some basic mathematical functions such as the exponential and logarithms: exp() is the exponential function log() is the logarithmic function Do not worry at all about these functions as you will use them later in GIF2 to come for transforming variables. Perform the following by typing them inside the R Console window: # use exp() to apply an exponential to a value exp(5) # use log() to transforrm a value on to a logarithm scale log(3) Creating basic objects and assigning values to it Now that we are familiar with using the console as a calculator. Let us build from this and learn one of the most important codes in RStudio which is called the Assignment Operator. This arrow symbol &lt;- is called the Assignment Operator. It is typed by pressing the less than symbol key &lt; followed by the hyphen symbol key -. It allows the user to assign values to an Object in R. Objects are defined as stored quantities in RStudio’s environment. These objects can be assigned anything from numeric values to character string values. For instance, say we want to create a numeric object called x and assign it with a value of 3. We do this by typing x &lt;- 3. When you enter the object x in the console and press enter ↵, it will return the numeric value 3. Another example, suppose we want to create a string object called y and assign it with some text \"Hello!\". We do this typing y &lt;- \"Hello!\". When you enter y in console, it will return the text value Hello. Let us create the objects a,b, c, and d and assign them with numeric values. Perform the following by typing them inside the R Console window: # Create an object called &#39;a&#39; and assign the value 17 to it a &lt;- 17 # Type the object &#39;a&#39; in console as a command to return value 17 a # Create an object called &#39;b&#39; and assign the value 10 to it b &lt;- 10 # Type the object &#39;b&#39; in console as a command to return value 10 b # Create an object called &#39;c&#39; and assign the value 9 to it c &lt;- 9 # Type the object &#39;c&#39; in console as a command to return value 9 c # Create an object called &#39;d&#39; and assign the value 8 to it d &lt;- 8 # Type the object &#39;d&#39; in console as a command to return value 8 d Notice how the objects a, b, c and d and its value are stored in RStudio’s environment panel. We can perform the following arithmetic operations with these object values: # type the following and return an answer (a + b + c + d)/5 # type the following and return an answer (5*(a-c)/d)^2 Let us create more objects but this time we will assign character string(s) to them. Please note that when typing a string of characters as data you will need to cover them with quotation marks \"...\". For example, say we want to create a string object called y and assign it with some text \"Hello!\". We do this by typing y &lt;- \"Hello!\". Try these examples of assigning the following character text to an object: # Create an object called &#39;e&#39; and assign the character string &quot;RStudio&quot; e &lt;- &quot;RStudio&quot; # Type the object &#39;e&#39; in the console as a command to return &quot;RStudio&quot; e # Create an object called &#39;f&#39;, assign character string &quot;Hello world&quot; f &lt;- &quot;Hello world&quot; # Type the object &#39;f&#39; in the console as a command to return &quot;Hello world&quot; f # Create an object called &#39;g&#39; and assign &quot;Blade Runner is amazing&quot; g &lt;- &quot;Blade Runner is amazing&quot; # Type the object &#39;g&#39; in the console to return the result g We are now familiar with using the console and assigning values (i.e., numeric and string values) to objects. The parts covered here are the initial steps and building blocks for coding and creating datasets in RStudio. Let us progress to the next section. We will learn the basics of managing data and some coding etiquette - this includes creating data frames, importing &amp; exporting spreadsheets, setting up work directories, column manipulations and merging two data frames. Learning these basic tasks are key for managing data in RStudio. Important Notes: We will be using R-scripts file for typing codes from this point onwards. "],["part-2-basics-of-managing-data-in-rstudio.html", "Part 2: Basics of Managing Data in RStudio How do we enter data into RStudio? How do we create a variable based on other existing variables in our data frame? How to set the working directory with setwd() function? Importing data using read.csv() Joining two datasets using the merge() function Saving your dataset using the write.csv() function", " Part 2: Basics of Managing Data in RStudio Video [Tutorials]: Data entry &amp; column generation (Length: 19:23 minutes) If the video does not play within this section, then try playing it from Microsoft Streams - you should be able to view it there using this LINK How do we enter data into RStudio? As you have already seen, RStudio is an object-oriented software package and so entering data is slightly different for the usual way of inputting information into a spreadsheet (e.g., Microsoft Excel). Here, you will need to enter the information as a Vector object before combining them into a Data Frame object. Consider this crude example of data containing the additional health information for 4 people. It contains the variable (or column) names ‘id’, ‘name’, ‘height’, ‘weight’ and ‘gender’ id name height weight gender 1 Kofi 1.65 64.2 M 2 Harry 1.77 80.3 M 3 Huijun 1.70 58.7 F 4 Fatima 1.68 75.0 F Now, when entering data to RStudio it is not like Microsoft Excel where we enter data into the cells of a spreadsheet. In RStudio, data is entered as a sequence of elements and listed inside an object called a vector. For instance, if we have three age values of 12, 57 and 26 years, and we want to enter this in RStudio, we need to use the combine function c() and combine these three elements into a vector object. Hence, the code will be c(12, 57, 26). We can assign this data by typing this code as age &lt;- c(12, 57, 26). Any time you type ‘age’ into RStudio console it will hence return these three values unless you chose to overwrite it with different information. Let us look at this more closely with the 'id' variable in the above data. Each person has an ID number from 1 to 4. We are going to list the numbers 1, 2, 3 and 4 as a sequence of elements into a vector using the combine function c() and then assign it to as a vector object calling it 'id'. # Create &#39;id&#39; vector object id &lt;- c(1, 2, 3, 4) # Type the vector object &#39;id&#39; in console to see output id Now, let us enter the information the same way for the remaining columns for ‘name’, ‘height’, ‘weight’ and ‘gender’ like we did for ‘id’: # Create &#39;name&#39; vector object name &lt;- c(&quot;Kofi&quot;, &quot;Harry&quot;, &quot;Huijun&quot;, &quot;Fatima&quot;) # Create &#39;height&#39; (in meters) vector object height &lt;- c(1.65, 1.77, 1.70, 1.68) # Create &#39;weight&#39; (in kg) vector object weight &lt;- c(64.2, 80.3, 58.7, 75.0) # Create &#39;gender&#39; vector object gender &lt;- c(&quot;M&quot;, &quot;M&quot;, &quot;F&quot;, &quot;F&quot;) Now, that we have the vector objects ready. Let us bring them together to create a proper dataset. This new object is called a Data frame. We need to list the vectors inside the data.frame() function. # Create a dataset (data frame) dataset &lt;- data.frame(id, name, height, weight, gender) # Type the data frame object &#39;dataset&#39; in console to see output dataset # You can also see dataset in a data viewer, type View() to data: View(dataset) Important Notes: The column ‘id’ is a numeric variable with integers. The second column ‘name’ is a text variable with strings. The third &amp; fourth columns ‘height’ and ‘weight’ are examples of numeric variables with real numbers with continuous measures. The variable ‘gender’ is a text variable with strings – however, this type of variable is classed as a categorical variable as individuals were categorised as either ‘M’ and ‘F’. How do we create a variable based on other existing variables in our data frame? To access a variable by its name within a data frame, you will need to first type the name of the data frame followed by a $ (dollar sign), and then typing the variable’s name of interest. For instance, suppose you just want to see the height values in the Console viewer - you just type: # to access height - you need to type &#39;dataset$height&#39; dataset$height We can use other columns or variables within our data frame to create another variable. This technique is essentially important when cleaning and managing data. From this dataset, it is possible to derive the body mass index bmi from height and weight using the formula: \\(BMI = weight/height^2\\) To generate bmi into our data frame, we would need to access the height (m) and weight (kg) columns using the $ from the data frame its stored to, and apply the above formula as a code to generate the new bmi column: # Create &#39;bmi&#39; in the data frame i.e.,&#39;dataset&#39; and calculate &#39;bmi&#39; # using the $weight and $height dataset$bmi &lt;- dataset$weight/((dataset$height)^2) # View the data frame ‘dataset’ and you will see the new bmi variable inside View(dataset) You can overwrite the height (m) column to change its units into centimeters by multiplying it to 100; equally, the weight (kg) column can be overwritten and converted from units of kilograms to grams by multiplying it to 1000. # using $height and *100 dataset$height &lt;- dataset$height*100 # using $weight and *100 dataset$weight &lt;- dataset$weight*1000 # use View() the data frame ‘dataset’ and you will see the updated variables View(dataset) How to set the working directory with setwd() function? Now, we are getting very serious here! Important action: Before we do anything - make sure to have downloaded the data set for week 1 if you haven’t done so by clicking here. In your computer, create a new folder on your desktop page and rename the folder to “GEOG0113”, and create another folder within “GEOG0013” and rename it as “Workshop 1”. Make sure to unzip and transfer ALL the downloaded data directly to the Workshop 1 folder. Now, this part of the practicals are probably the most important section of this tutorial. It’s usually the “make” or “break” phase (i.e., you ending up loving RStudio OR you hating it and not ever wanting to pick up R again). We are going to learn how to set-up a working directory. This basically refers to us connecting the RStudio to the folder containing our dataset. It allows the user to tell RStudio to open data from a folder once it knows the path location. The path location specifies the whereabouts of the data file(s) stored within a computer. Setting your directory in RStudio beforehand makes life incredibly easier in terms of finding, importing, exporting and saving data in and out of RStudio. To illustrate what a path location is – suppose on my desktop (mac/widows) there is a folder called “GEOG0013”, and within that folder, exists another folder called “Workshop 1”. Finally, suppose a comma separated value (.csv) data file called “Barcelona_rents_2015.csv” is store in this last folder i.e., Workshop 1. If via RStudio you want to open this CSV data file located in within the “Workshop 1” folder. You will need to first set the path to “Workshop 1” in RStudio using the setwd() function. Therefore, the path location to this folder on a Windows machine would be written as follows, \"C:/Users/accountName/Desktop/GEOG0013/Workshop 1\". You can access this piece of information simply by: Open the GEOG0013 folder to reveal the Workshop 1 folder. Open the Workshop 1 folder in the data files are stored. Now, click on the bar at the top which shows GEOG0013 &gt; Workshop 1. This should highlight and show \"C:\\Users\\accountName\\Desktop\\GEOG0013\\Workshop 1\" (see image below): Now, copy \"C:\\Users\\accountName\\Desktop\\GEOG0013\\Workshop 1\" and paste the path name into the setwd() function in your R script. Lastly, change all the back slashes \\ in the path name to forward slashes / and run the code. It should look like this: setwd(\"C:/Users/accountName/Desktop/GEOG0013/Workshop 1\"). For Windows, the setwd() is as follows: # set work directory in windows setwd(&quot;C:/Users/accountName/Desktop/GEOG0013/Workshop 1&quot;) For MAC users, its marginally different. The path location would be written as follows, \"/Users/accountName/Desktop/GEOG0013/Workshop 1\". You can access this piece of information simply by: Right-clicking on the folder “Workshop 1” (not file) in which the files are stored. Hold the “Option” ⌥ key down Click Copy \"filename\" as Pathname Paste the copied path name into the function setwd() and run the code For Mac, the setwd() is as follows: # set work directory in macs setwd(&quot;/Users/accountName/Desktop/GEOG0013/Workshop 1&quot;) This should set the working directory. Now, let us learn how to import a CSV data into RStudio. Importing data using read.csv() As you will be working mostly with comma separated value formatted data (i.e., csv) we will therefore learn how to import and export in RStudio. There are two files that we are going to import into RStudio from Week 1’s folder: Barcelona_cars_2015.csv which contains an indicator for proportion of car ownership in 73 Spanish neighbourhoods in Barcelona in 2015. Barcelona_rents_2015.csv which contains an indicator for average monthly rent (in euros) spent in 73 Spanish neighbourhoods in Barcelona in 2015. To import a csv into RStudio, we use the read.csv() function. To demonstrate this, let us import the data for average monthly rents into an data frame object and name it as Rent_data # Import data using read.csv() function Rent_data &lt;- read.csv(file=&quot;Barcelona_rents_2015.csv&quot;, header = TRUE, sep = &quot;,&quot;) Just in case…suppose if we did NOT set the working directory earlier. We would have to go through the hassle of typing the path location in the read.csv(). For windows: Rent_data &lt;- read.csv(file=&quot;C:/Users/accountName/Desktop/GEOG0013/Workshop 1/Barcelona_rent_2015.csv&quot;, header = TRUE, sep = &quot;,&quot;) For Mac: Rent_data &lt;- read.csv(file=&quot;/Users/accountName/Desktop/GEOG0013/Workshop 1/Barcelona_rent_2015.csv&quot;, header = TRUE, sep = &quot;,&quot;) I do not recommend doing it this way. Just set the work directory with setwd() to make life easier for yourself. Important Notes: The arguments used in read.csv() function – 1.) ‘file =’ is a mandatory option where you quote the name of the file to be imported; 2.) ‘header = TRUE’ option is set to TRUE which is telling RStudio that the file that is about to be imported has column names on the first row so it should not treat as observations; and 3.) ‘sep = \",\"’ we are telling RStudio that the format of the dataset is comma separated. We have imported the Barcelona_rents_2015.csv data. Now, let us import the second data for Barcelona_cars_2015.csv using the read.csv() function and call it Cars_data. The code would look something as follows: # Import data using read.csv() function Cars_data &lt;- read.csv(file=&quot;Barcelona_cars_2015.csv&quot;, header = TRUE, sep = &quot;,&quot;) # Show viewer the data sets View(Rent_data) View(Cars_data) Joining two datasets using the merge() function In your journey with data sets, you will certainly find yourself merging two or more data frames together, especially bringing together a spatial object with a non-spatial object. We cannot stress the importance of merging objects in the correct order so that the spatial attributes are preserved. It is possible to merge the two data frames uniquely using a common key variable like neighbourhoods that is present in both data sets. This task can be done using the merge function merge(). Consequently, we want the format of the merge code to look something akin to this syntax merge(target_object, selected_object, by=”Key_variable”). Merging data frames is indeed a very important technique to know especially if you need to bring together event information with no spatial dimension with actual spatial data. Alright, let’s merge the cars ownership information on the home rental records using the Key_variable column, and generate a bigger data frame that contains both the rental and car ownership information: # Using the merge() function Barcelona_data &lt;- merge(Rent_data, Cars_data, by.x = &quot;neighbourhood&quot;, by.y = &quot;neighbourhood&quot;, all.x = TRUE) # View the datasets View(Barcelona_data) Important Notes: The arguments used in merge.csv(): Rent_data is the target data frame we want something to be merged on to. Cars_data is the selected data frame we are using to merge with the Rent_data. by.x = “neighbourhood” option we are specifying the name of the join column from the target data frame i.e., Rent_data. by.y = “neighbourhood” option we are specifying the name of the join column from the selected data frame i.e., Cars_data all.x=TRUE option we are telling RStudio to retain all rows that are originally from the target data after merging regardless of whether or not they are present in the selected data frame. So even if a row from the selected data does not find a unique link with any of the rows in target data to match too - it will still preserve the target data frame by not discarding unlinked rows. But it will discard the unmatched rows from the selected data frame. Saving your dataset using the write.csv() function Let us save a version of this as a .csv file as a saved product named “Barcelona_Data.csv”. This can be done by using the write.csv() function. It will export the data frame object into a .csv format. # Export ‘Barcelona_Data’ object as .csv into &#39;Week 1&#39; folder write.csv(Barcelona_Data, file = &quot;Barcelona_Data.csv&quot;, row.names = FALSE) Important Notes: The arguments used in merge.csv(): Barcelona_Data is an object we are exporting. It is compulsory to specify the object data frame we want to export file = is a mandatory argument. We must give a name to the file we wish to export it as with .csv extension. row.names = this is an annoying argument! It will automatically index the dataset with unique row numbers by default if we do not specify FALSE! Since the data has its own unique identifiers (i.e., neighbourhoods) we specify ‘FALSE’ to not perform this action of indexing Again, suppose if you did NOT set the work directory to your folder, you will have to type the whole path location to where you want the data to be exported which could be a hassle: For Windows: write.csv(Full_data, file = &quot;C:/Users/accountName/Desktop/GEOG0013/Workshop 1/Barcelona_data.csv&quot;, row.names = FALSE) For Mac: write.csv(Full_data, file = &quot;/Users/accountName/Desktop/GEOG0013/Workshop 1/Barcelona_data.csv&quot;, row.names = FALSE) Again, I do not recommend doing it this way. Just set the work directory with setwd() to make life easier for yourself and to avoid R calling you out for errors. Now that we have learned a lot of the basic things in RStudio – the stuff shown in Part 2 will be used quite a lot moving forward in journey of studies. Now, let us progress to the meat and potatoes in *Part 3** where will start using RStudio for statistical analysis. Here, we will conduct some descriptive profile of the air quality using pollution data from Barcelona. We’re in the final stretch now. "],["part-3-exploratory-analysis-in-rstudio.html", "Part 3: Exploratory analysis in RStudio Data types and variables Frequency distributions Descriptive and central tendency measures", " Part 3: Exploratory analysis in RStudio What is statistics? Definition: Statistics is a branch in the mathematical sciences that pertains to the collection, analysis, interpretation, and graphical presentation of data. The best thing about statistics is that it’s a highly applied branch of science which is applicable to many areas such as social science, politics, health (e.g., epidemiology), business &amp; finance, environmental sciences and geography. Statistics is broadly split into two main areas: Descriptive statistics, which focuses on describing the visible characteristics about a dataset Inferential statistics is more research-based, which focuses on making predictions (rather than stating facts) and testing hypothesis about a phenomenon. We will focus on descriptive statistics as an introduction introducing everyone to the absolute basics. Descriptive statistics is all about knowing the data types and finding the distribution, central tendency and variability in such data set. These four key words may sound intimidating – but trust me – it is very easy! Let us learn how to perform this in RStudio using the air pollution data for Barcelona. Data types and variables What is a variable? Defintion: A variable is any characteristics, numbered value, or quantity that can be measured or counted. A variable can also be referred to a data Item. A variable can be broadly classified as discrete, continuous or categorical variable. Discrete variables contain data with countable items: e.g., number of crimes committed in London, number of students in a classroom, number of languages an individual can speak etc., Continuous variables contains data with measurable items: e.g., Age (in years: 25, 57, 34 etc.,), monthly income (in £: 2399.58, £5559.89, £1,450.99 etc.,), height (in meters) or weight (in kg) Categorical variables contain categories or groups: e.g., gender (male or female), ethnicity (Asian, Black, Mixed, White etc.,); or employment status. Let us import for following dataset Barcelona_Air_Pollution_data.csv into RStudio, and call this object air_ quality_data. Remember - always make sure that your work directory is linked to your folder containing your data. For Windows: setwd(&quot;C:/Users/accountName/Desktop/GEOG0013/Workshop 1/&quot;) For Macs: setwd(&quot;/Users/accountName/Desktop/GEOG0013/Workshop 1/&quot;) Now, import you the data set as follows: air_quality_data &lt;- read.csv(&quot;Barcelona_Air_Pollution_data.csv&quot;) You use the command View() see the full data viewer, or head() to see the first five rows of the dataset. # see imported dataset View(air_quality_data) head(air_quality_data) You will notice that the data contains six variables with the following information: Variable name Variable Type Information Location String/Text only Name of location Eixample, Barcelona ReadingDate Date Data collection date for air quality measures NO2_est Continuous Measurements for Nitrogen dioxide (NO\\(_2\\)) (ppb) NO2_category Categorical Health impacts (negligible/low/moderate/high) PM10_est Continuous Measurements for Particulate matter (PM10) PM10_category Categorical Health impacts (negligible/low/moderate) Important Notes: The NO2_est, for example, contains measurable items i.e., 718 observations for concentrations of ambient NO\\(_2\\) in Eixample area of Barcelona, and hence its a continuous variable. These estimates have been categorised in accordance with their health dangers i.e., negligible (\\(&lt;\\) 10 ppb); low (11-50 ppb); moderate (51-100 ppb) and high (&gt;101 pbb). The categories are contained in the variable NO2_category. Let us begin to analyse NO2_est and NO2_category with frequency distributions Frequency distributions We use frequency distribution to analyse a set continuous data. In data handling in this context, there are two outputs generated: Frequency, which tells us how often a particular result was obtained. From this we can calculate a percentage value which is referred to as Relative Frequency. Cumulative Frequency, this is a cumulative sum of the frequencies, which indicates how often a result was obtained that is less than a stated value in our collection of data. Again, from this we can also calculate a cumulative percentage value which is referred to as Cumulative Relative Frequency. Suppose, we want to assess the 718 observations for air pollutant Nitrogen Dioxide (NO\\(_2\\)). Let’s list the observations for Nitrogen Dioxide (NO\\(_2\\)) in Barcelona: air_quality_data$NO2_est ## [1] 61 59 29 75 23 49 43 35 83 75 71 56 54 44 41 54 62 56 ## [19] 26 42 71 86 85 52 56 45 68 86 69 71 4 82 43 51 114 43 ## [37] 18 58 24 53 98 53 100 53 49 49 46 82 77 67 76 52 61 80 ## [55] 77 70 56 49 42 73 64 33 71 72 13 37 26 46 84 72 65 76 ## [73] 90 46 61 81 64 62 58 78 83 37 130 43 20 40 102 68 48 74 ## [91] 52 43 80 71 42 84 44 121 41 66 44 50 38 75 41 45 48 63 ## [109] 53 63 63 46 34 87 75 74 36 69 46 15 80 75 83 95 5 65 ## [127] 21 84 68 32 45 73 53 31 85 91 73 46 25 75 70 84 68 65 ## [145] 58 113 62 60 55 69 82 100 105 47 60 103 53 34 39 22 21 71 ## [163] 85 56 73 61 24 44 47 49 100 64 91 79 42 32 33 84 43 61 ## [181] 63 49 80 46 58 45 37 66 60 75 35 75 48 43 57 67 54 38 ## [199] 22 51 69 51 64 32 20 52 42 65 69 47 40 34 34 51 57 43 ## [217] 52 86 53 43 54 75 56 62 41 84 41 22 83 76 51 31 50 65 ## [235] 76 77 61 50 75 49 47 65 78 39 51 49 75 45 50 69 86 75 ## [253] 89 68 84 90 90 56 106 63 90 57 38 86 22 39 19 61 44 63 ## [271] 52 42 46 56 40 69 62 42 54 17 49 84 34 89 65 53 78 67 ## [289] 55 61 39 82 58 15 63 76 55 80 56 79 72 58 74 27 93 40 ## [307] 40 58 79 81 123 84 37 87 38 49 91 50 59 69 57 68 53 38 ## [325] 51 78 71 72 55 70 56 63 85 78 64 23 84 43 46 33 59 58 ## [343] 47 64 68 89 76 86 116 52 34 63 40 41 72 87 37 62 38 68 ## [361] 88 39 59 77 75 112 44 40 90 37 66 61 65 50 79 79 36 36 ## [379] 12 86 40 62 63 71 53 30 44 76 41 62 77 80 62 86 37 48 ## [397] 80 55 56 49 84 48 49 84 60 76 28 77 41 57 55 51 54 54 ## [415] 11 43 38 86 30 23 78 29 80 16 48 90 44 42 50 54 45 42 ## [433] 70 49 67 73 60 42 99 97 77 46 52 24 75 30 70 81 53 17 ## [451] 63 59 44 41 67 56 58 111 43 47 49 58 36 72 36 103 63 77 ## [469] 65 42 42 79 41 24 59 50 46 55 77 91 54 70 73 53 80 53 ## [487] 72 67 95 57 87 39 73 56 34 56 75 74 72 42 119 55 43 69 ## [505] 55 52 77 63 108 43 61 47 117 80 61 67 78 49 42 35 58 54 ## [523] 36 84 56 72 70 40 59 71 56 49 66 52 48 60 54 73 66 67 ## [541] 70 93 65 60 13 83 49 42 62 63 50 46 54 94 73 54 74 54 ## [559] 10 71 41 17 75 55 54 54 83 47 49 90 76 89 83 43 76 67 ## [577] 75 88 59 60 34 36 63 42 59 71 73 73 40 74 53 56 99 46 ## [595] 46 64 37 20 84 86 47 57 54 56 78 73 65 72 37 57 38 46 ## [613] 43 57 98 32 98 53 86 59 63 42 60 60 51 58 59 83 67 42 ## [631] 74 62 84 67 49 76 2 44 51 69 69 87 49 18 73 66 81 78 ## [649] 82 69 50 36 71 60 7 50 49 60 55 25 58 76 69 61 88 45 ## [667] 59 59 91 61 81 81 83 71 108 99 46 69 38 54 59 16 75 81 ## [685] 35 63 65 71 57 53 58 37 39 43 64 76 56 72 87 74 74 77 ## [703] 46 87 53 60 47 10 61 35 36 60 71 45 47 79 37 123 In a list format it is quite difficult to make head or tail on what observations appear frequently and its distribution. To summarise this - it will be helpful to classify the information into Classes and then obtain the Frequency and Cumulative Frequency in a table. We call this table a Frequency Table. The minimum value for NO\\(_2\\) is 2 and the maximum is 130. We can group the 718 observations into 13 classes using an interval of 10s e.g., 1-10, 11-20, 21-30, 31-40, 41-50, 51-60, 61-70, 71-80, 81-90, 91-100, 101-110, 111-120 and 121-130 Important Notes: The way and manner you specify the classes and interval are up to you really. Here, 10 is being used for convenience. The interval width is 10, we can generate sequence of number from 0 to 130, inclusively, to create the classes which in turn be used to group the 718 observations into 13 classes using the seq() and cut(). For example: # using starting value as 0 # using highest value as 130 # using interval as 10 # specify in this order the lower, highest, interval value in seq() function classes &lt;- seq(0, 130, 10) classes ## [1] 0 10 20 30 40 50 60 70 80 90 100 110 120 130 The sequence of values are stored in the object called classes. Now, let us apply the cut() function to group the NO\\(_2\\) data accordingly. We can do this by generating a new variable called Groups. # tell the cut() function to group NO2_est using the classes object air_quality_data$Groups &lt;- cut(air_quality_data$NO2_est, breaks=classes) air_quality_data$Groups ## [1] (60,70] (50,60] (20,30] (70,80] (20,30] (40,50] (40,50] ## [8] (30,40] (80,90] (70,80] (70,80] (50,60] (50,60] (40,50] ## [15] (40,50] (50,60] (60,70] (50,60] (20,30] (40,50] (70,80] ## [22] (80,90] (80,90] (50,60] (50,60] (40,50] (60,70] (80,90] ## [29] (60,70] (70,80] (0,10] (80,90] (40,50] (50,60] (110,120] ## [36] (40,50] (10,20] (50,60] (20,30] (50,60] (90,100] (50,60] ## [43] (90,100] (50,60] (40,50] (40,50] (40,50] (80,90] (70,80] ## [50] (60,70] (70,80] (50,60] (60,70] (70,80] (70,80] (60,70] ## [57] (50,60] (40,50] (40,50] (70,80] (60,70] (30,40] (70,80] ## [64] (70,80] (10,20] (30,40] (20,30] (40,50] (80,90] (70,80] ## [71] (60,70] (70,80] (80,90] (40,50] (60,70] (80,90] (60,70] ## [78] (60,70] (50,60] (70,80] (80,90] (30,40] (120,130] (40,50] ## [85] (10,20] (30,40] (100,110] (60,70] (40,50] (70,80] (50,60] ## [92] (40,50] (70,80] (70,80] (40,50] (80,90] (40,50] (120,130] ## [99] (40,50] (60,70] (40,50] (40,50] (30,40] (70,80] (40,50] ## [106] (40,50] (40,50] (60,70] (50,60] (60,70] (60,70] (40,50] ## [113] (30,40] (80,90] (70,80] (70,80] (30,40] (60,70] (40,50] ## [120] (10,20] (70,80] (70,80] (80,90] (90,100] (0,10] (60,70] ## [127] (20,30] (80,90] (60,70] (30,40] (40,50] (70,80] (50,60] ## [134] (30,40] (80,90] (90,100] (70,80] (40,50] (20,30] (70,80] ## [141] (60,70] (80,90] (60,70] (60,70] (50,60] (110,120] (60,70] ## [148] (50,60] (50,60] (60,70] (80,90] (90,100] (100,110] (40,50] ## [155] (50,60] (100,110] (50,60] (30,40] (30,40] (20,30] (20,30] ## [162] (70,80] (80,90] (50,60] (70,80] (60,70] (20,30] (40,50] ## [169] (40,50] (40,50] (90,100] (60,70] (90,100] (70,80] (40,50] ## [176] (30,40] (30,40] (80,90] (40,50] (60,70] (60,70] (40,50] ## [183] (70,80] (40,50] (50,60] (40,50] (30,40] (60,70] (50,60] ## [190] (70,80] (30,40] (70,80] (40,50] (40,50] (50,60] (60,70] ## [197] (50,60] (30,40] (20,30] (50,60] (60,70] (50,60] (60,70] ## [204] (30,40] (10,20] (50,60] (40,50] (60,70] (60,70] (40,50] ## [211] (30,40] (30,40] (30,40] (50,60] (50,60] (40,50] (50,60] ## [218] (80,90] (50,60] (40,50] (50,60] (70,80] (50,60] (60,70] ## [225] (40,50] (80,90] (40,50] (20,30] (80,90] (70,80] (50,60] ## [232] (30,40] (40,50] (60,70] (70,80] (70,80] (60,70] (40,50] ## [239] (70,80] (40,50] (40,50] (60,70] (70,80] (30,40] (50,60] ## [246] (40,50] (70,80] (40,50] (40,50] (60,70] (80,90] (70,80] ## [253] (80,90] (60,70] (80,90] (80,90] (80,90] (50,60] (100,110] ## [260] (60,70] (80,90] (50,60] (30,40] (80,90] (20,30] (30,40] ## [267] (10,20] (60,70] (40,50] (60,70] (50,60] (40,50] (40,50] ## [274] (50,60] (30,40] (60,70] (60,70] (40,50] (50,60] (10,20] ## [281] (40,50] (80,90] (30,40] (80,90] (60,70] (50,60] (70,80] ## [288] (60,70] (50,60] (60,70] (30,40] (80,90] (50,60] (10,20] ## [295] (60,70] (70,80] (50,60] (70,80] (50,60] (70,80] (70,80] ## [302] (50,60] (70,80] (20,30] (90,100] (30,40] (30,40] (50,60] ## [309] (70,80] (80,90] (120,130] (80,90] (30,40] (80,90] (30,40] ## [316] (40,50] (90,100] (40,50] (50,60] (60,70] (50,60] (60,70] ## [323] (50,60] (30,40] (50,60] (70,80] (70,80] (70,80] (50,60] ## [330] (60,70] (50,60] (60,70] (80,90] (70,80] (60,70] (20,30] ## [337] (80,90] (40,50] (40,50] (30,40] (50,60] (50,60] (40,50] ## [344] (60,70] (60,70] (80,90] (70,80] (80,90] (110,120] (50,60] ## [351] (30,40] (60,70] (30,40] (40,50] (70,80] (80,90] (30,40] ## [358] (60,70] (30,40] (60,70] (80,90] (30,40] (50,60] (70,80] ## [365] (70,80] (110,120] (40,50] (30,40] (80,90] (30,40] (60,70] ## [372] (60,70] (60,70] (40,50] (70,80] (70,80] (30,40] (30,40] ## [379] (10,20] (80,90] (30,40] (60,70] (60,70] (70,80] (50,60] ## [386] (20,30] (40,50] (70,80] (40,50] (60,70] (70,80] (70,80] ## [393] (60,70] (80,90] (30,40] (40,50] (70,80] (50,60] (50,60] ## [400] (40,50] (80,90] (40,50] (40,50] (80,90] (50,60] (70,80] ## [407] (20,30] (70,80] (40,50] (50,60] (50,60] (50,60] (50,60] ## [414] (50,60] (10,20] (40,50] (30,40] (80,90] (20,30] (20,30] ## [421] (70,80] (20,30] (70,80] (10,20] (40,50] (80,90] (40,50] ## [428] (40,50] (40,50] (50,60] (40,50] (40,50] (60,70] (40,50] ## [435] (60,70] (70,80] (50,60] (40,50] (90,100] (90,100] (70,80] ## [442] (40,50] (50,60] (20,30] (70,80] (20,30] (60,70] (80,90] ## [449] (50,60] (10,20] (60,70] (50,60] (40,50] (40,50] (60,70] ## [456] (50,60] (50,60] (110,120] (40,50] (40,50] (40,50] (50,60] ## [463] (30,40] (70,80] (30,40] (100,110] (60,70] (70,80] (60,70] ## [470] (40,50] (40,50] (70,80] (40,50] (20,30] (50,60] (40,50] ## [477] (40,50] (50,60] (70,80] (90,100] (50,60] (60,70] (70,80] ## [484] (50,60] (70,80] (50,60] (70,80] (60,70] (90,100] (50,60] ## [491] (80,90] (30,40] (70,80] (50,60] (30,40] (50,60] (70,80] ## [498] (70,80] (70,80] (40,50] (110,120] (50,60] (40,50] (60,70] ## [505] (50,60] (50,60] (70,80] (60,70] (100,110] (40,50] (60,70] ## [512] (40,50] (110,120] (70,80] (60,70] (60,70] (70,80] (40,50] ## [519] (40,50] (30,40] (50,60] (50,60] (30,40] (80,90] (50,60] ## [526] (70,80] (60,70] (30,40] (50,60] (70,80] (50,60] (40,50] ## [533] (60,70] (50,60] (40,50] (50,60] (50,60] (70,80] (60,70] ## [540] (60,70] (60,70] (90,100] (60,70] (50,60] (10,20] (80,90] ## [547] (40,50] (40,50] (60,70] (60,70] (40,50] (40,50] (50,60] ## [554] (90,100] (70,80] (50,60] (70,80] (50,60] (0,10] (70,80] ## [561] (40,50] (10,20] (70,80] (50,60] (50,60] (50,60] (80,90] ## [568] (40,50] (40,50] (80,90] (70,80] (80,90] (80,90] (40,50] ## [575] (70,80] (60,70] (70,80] (80,90] (50,60] (50,60] (30,40] ## [582] (30,40] (60,70] (40,50] (50,60] (70,80] (70,80] (70,80] ## [589] (30,40] (70,80] (50,60] (50,60] (90,100] (40,50] (40,50] ## [596] (60,70] (30,40] (10,20] (80,90] (80,90] (40,50] (50,60] ## [603] (50,60] (50,60] (70,80] (70,80] (60,70] (70,80] (30,40] ## [610] (50,60] (30,40] (40,50] (40,50] (50,60] (90,100] (30,40] ## [617] (90,100] (50,60] (80,90] (50,60] (60,70] (40,50] (50,60] ## [624] (50,60] (50,60] (50,60] (50,60] (80,90] (60,70] (40,50] ## [631] (70,80] (60,70] (80,90] (60,70] (40,50] (70,80] (0,10] ## [638] (40,50] (50,60] (60,70] (60,70] (80,90] (40,50] (10,20] ## [645] (70,80] (60,70] (80,90] (70,80] (80,90] (60,70] (40,50] ## [652] (30,40] (70,80] (50,60] (0,10] (40,50] (40,50] (50,60] ## [659] (50,60] (20,30] (50,60] (70,80] (60,70] (60,70] (80,90] ## [666] (40,50] (50,60] (50,60] (90,100] (60,70] (80,90] (80,90] ## [673] (80,90] (70,80] (100,110] (90,100] (40,50] (60,70] (30,40] ## [680] (50,60] (50,60] (10,20] (70,80] (80,90] (30,40] (60,70] ## [687] (60,70] (70,80] (50,60] (50,60] (50,60] (30,40] (30,40] ## [694] (40,50] (60,70] (70,80] (50,60] (70,80] (80,90] (70,80] ## [701] (70,80] (70,80] (40,50] (80,90] (50,60] (50,60] (40,50] ## [708] (0,10] (60,70] (30,40] (30,40] (50,60] (70,80] (40,50] ## [715] (40,50] (70,80] (30,40] (120,130] ## 13 Levels: (0,10] (10,20] (20,30] (30,40] (40,50] (50,60] (60,70] ... (120,130] The observations have now been grouped to the classes. You can see this explicitly in the data viewer: View(air_quality_data) Important Notes: What have we done here? The first value under the NO2_est column is 61, this value falls between 61-70 and hence under the Group column is was classed into the (61,70] interval by the cut() function. The second value in NO2_est is 59, and hence it was classed into the (51,60] interval, and so on. Computing the Frequency Distribution table We can now generate our frequency table and hence determine frequency and cumulative frequency of the ambient levels of NO\\(_2\\) in Eixample. We perform by using the table() function to tabulate the frequency of values that were grouped within an interval using the Group column. table(air_quality_data$Groups) ## ## (0,10] (10,20] (20,30] (30,40] (40,50] (50,60] (60,70] (70,80] ## 6 17 24 68 131 137 109 116 ## (80,90] (90,100] (100,110] (110,120] (120,130] ## 72 20 7 7 4 Using table() function only shows results in the Console - lets store the table results in a data frame object and call it frequency_results: frequency_results &lt;- data.frame(table(air_quality_data$Groups)) frequency_results ## Var1 Freq ## 1 (0,10] 6 ## 2 (10,20] 17 ## 3 (20,30] 24 ## 4 (30,40] 68 ## 5 (40,50] 131 ## 6 (50,60] 137 ## 7 (60,70] 109 ## 8 (70,80] 116 ## 9 (80,90] 72 ## 10 (90,100] 20 ## 11 (100,110] 7 ## 12 (110,120] 7 ## 13 (120,130] 4 You can see column names Var1 and Freq. The Var1 is the original Groups columns which incidentally been renamed to Var1. The Freq column was generated from the table() function. We can rename the 1st and 2nd columns using colnames(). # rename first column t9 &quot;Groups&quot; # rename second column to &quot;Frequency&quot; # print new variable names in console using names() function colnames(frequency_results)[1] &lt;- &quot;Groups&quot; colnames(frequency_results)[2] &lt;- &quot;Frequency&quot; names(frequency_results) ## [1] &quot;Groups&quot; &quot;Frequency&quot; frequency_results ## Groups Frequency ## 1 (0,10] 6 ## 2 (10,20] 17 ## 3 (20,30] 24 ## 4 (30,40] 68 ## 5 (40,50] 131 ## 6 (50,60] 137 ## 7 (60,70] 109 ## 8 (70,80] 116 ## 9 (80,90] 72 ## 10 (90,100] 20 ## 11 (100,110] 7 ## 12 (110,120] 7 ## 13 (120,130] 4 Finally, we derive the relative frequency i.e., a percentage that is derived by dividing each frequency value from a group by the total number of observations (i.e., in this case: 718). We can add the relativeFreq column to the frequency_results table. # generate a new column frequency_results$relativeFreq &lt;- frequency_results$Frequency/718 Interpretation of frequency: The above table output show the frequency distribution of a set of concentrations for Nitrogen Dioxide measured in Eixample (in Barcelona). The group with the highest frequency value is 50-60ppb (i.e., 137) which accounts for 0.1908 (19.08%) of the data. These measurements typically fall under the category that’s considered to cause moderate harm to humans. Let’s add the cumulative frequency and cumulative relative frequency i.e., percentage using this code below: # add cumulativeFreq column to the data frame by adding Frequency using cumsum() function frequency_results$cumulativeFreq &lt;- cumsum(frequency_results$Frequency) # add cumulativeRelFreq column to the data frame by adding Frequency using cumsum() function frequency_results$cumulativeRelFreq &lt;- cumsum(frequency_results$relativeFreq) # print table results frequency_results ## Groups Frequency relativeFreq cumulativeFreq cumulativeRelFreq ## 1 (0,10] 6 0.008356546 6 0.008356546 ## 2 (10,20] 17 0.023676880 23 0.032033426 ## 3 (20,30] 24 0.033426184 47 0.065459610 ## 4 (30,40] 68 0.094707521 115 0.160167131 ## 5 (40,50] 131 0.182451253 246 0.342618384 ## 6 (50,60] 137 0.190807799 383 0.533426184 ## 7 (60,70] 109 0.151810585 492 0.685236769 ## 8 (70,80] 116 0.161559889 608 0.846796657 ## 9 (80,90] 72 0.100278552 680 0.947075209 ## 10 (90,100] 20 0.027855153 700 0.974930362 ## 11 (100,110] 7 0.009749304 707 0.984679666 ## 12 (110,120] 7 0.009749304 714 0.994428969 ## 13 (120,130] 4 0.005571031 718 1.000000000 Interpretation of cumulative frequency: The above table output show the cumulative frequency distribution ambient concentrations for Nitrogen Dioxide measured in Eixample (in Barcelona). We can see that there are 246 measurements or less with N0\\(_2\\) concentrations to be considered as negligible or low impact to health (&lt;50ppb). This corresponds to 0.3426 (34.26%) of the data. Conversely, we can also say - we can see that there are 472 measurements with N0\\(_2\\) concentrations more than 50ppb which is considered to be moderate or high impact to human health. This corresponds to 0.6573 (65.73%) of the data. Graphical representation of frequency data The frequency table for frequencies and cumulative frequencies can be graphical represented in a form of histogram and frequency diagram respectively. Now, we need the data must be in its original form (i.e., not grouped) to plot the histogram, and we will need to use the classes object which we created earlier on from the seq() function so as to use as breaks in the hist() plot function: hist(air_quality_data$NO2_est, breaks = classes) The above graph is not publication-worthy. It is missing key details such as the title and label for the x-axis. Let’s apply some cosmetics such as a main title and label for the x-axis hist(air_quality_data$NO2_est, breaks = classes, main = &quot;Histogram for NO2 in Barcelona&quot;, xlab = &quot;NO2 estimates (ppb)&quot;) Interpretation of histogram: The above figure output describes the shape for ambient measures of NO\\(_2\\) in Barcelona which appears bell-shaped centered around 60ppb. Note that the frequency bars in this graph are essentially the same as the frequency values in the table. Lastly, we then compute its cumulative frequency with cumsum() to support the interpretation. The coding needs a bit of hacking because we need to force a starting zero element for this graph to work. cumfreq0 &lt;- c(0, cumsum(frequency_results$Frequency)) plot(classes, cumfreq0, main=&quot;Cumulative Frequency for N02 in Barcelona&quot;, xlab=&quot;NO2 estimates (ppb)&quot;, ylab=&quot;Cumulative Frequencies&quot;) lines(classes, cumfreq0) Descriptive and central tendency measures We have used frequency distribution to describe the distribution about the data for air pollution in Barcelona. The description is at face-value though. Central tendency measures contains a list of summary measurements that allows the user to summarize the data to some central measure and to gauge the spread of the data (i.e., errors/departures from central measure). It is best for continuous variables, we can hence compute the following summary measurements (watch video see to definitions): Mean Median Standard deviation Minimum and Maximum values Quartiles (or Interquartile ranges) To compute the summary statistics rapidly – simply use the summary() function on the variable of interest (i.e., NO2_est from the original dataset). # compute all descriptive summaries measurements summary(air_quality_data$NO2_est) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 2.00 46.00 59.00 59.69 74.00 130.00 As you can see using summary() automatically gives you almost all the summary estimates needed for interpretation. The NO\\(_2\\) air levels in Barcelona was 59.69ppb (with median 59.00pbb). The lowest and highest values are 2.0ppb and 130.0ppb, respectively (with 25th and 75th percentiles being 46.00ppb and 74.00pbb, respectively.) Finally, you can compute the standard deviation using the sd() function as follows for income: # compute all descriptive summaries measurements sd(air_quality_data$NO2_est) ## [1] 20.60876 The standard deviation is ± 20.61pbb – this is the error around the mean of NO\\(_2\\) i.e., estimated as 59.69ppb. To visualise the distribution of a continuous variable – your ‘go-to’ plot is a boxplot. You can use the function boxplot() to generate one. Type the following to churn it: # Box plot boxplot(air_quality_data$NO2_est, ylab = &quot;NO2 estimates (ppb)&quot;, main=&quot;Box plot: Summary of Nitrogen Dioxide in Barcelona&quot;) Descriptive Interpretation of results: "],["conclusion-workshop-preparation.html", "Conclusion: Workshop Preparation", " Conclusion: Workshop Preparation [Insert video of me just babbling on] "],["appendendum.html", "Appendendum Appendix 1: List of functions used in this workshop Appendix 2: List of symbols used in this workshop", " Appendendum Appendix 1: List of functions used in this workshop Function Description of use setwd() Use it to set the work directory to folder with stored data read.csv() Use it to import and open a .csv excel spreadsheet write.csv() Use it to export and save data as a .csv excel spreadsheet data.frame() Use it to create data frame object View() Use it to examine your data set in a data viewer merge() Use it to merge two data frames together c() Use it to create a list of data items to create a vector object exp() A simple mathematical function - exponential log() A simple mathematical function - logarithmic head() Use on data frame to see the first couple of row observations tail() Use on data frame to see the last couple of row observations min() Use on variable to see the lowest value max() Use on variable to see the highest value seq() Use it to generate a sequence of numbers cut() Use it to class or categorize a continuous variable table Create a table, or to perform cross-tabulation cumsum() Compute the cumulative sums of a variable hist() Plot a histogram plot() Make a general plot colnames() To rename columns summmary() Reports the min, max, median, mean, and IQRs sd() Reports the standard deviation boxplot() Plot a box plot Appendix 2: List of symbols used in this workshop Symbol Description of use $ Dollar sign for accessing a variable within a data frame &lt;- Operator sign for assigning values to an object + Addition - Subtraction * Multiplication / Divisor ^ Raise to power "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
